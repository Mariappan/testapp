{"version":3,"sources":["logo.svg","components/Clock/AnalogClock.tsx","components/Clock/Clock.tsx","InnerApp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ClockSVG","props","little","hours","minutes","big","fast","seconds","rotatehand","value","viewBox","width","height","id","cx","cy","r","spreadMethod","offset","stopColor","stopOpacity","fill","d","vector-effect","stroke-width","transform","x","y","font-family","font-size","clip-path","stroke-linejoin","stroke-linecap","stroke-miterlimit","stroke","href","x1","y1","x2","y2","Clock","timerId","date","Date","state","getSeconds","getMinutes","getHours","this","setState","window","setInterval","clock_tick","clearInterval","event","console","log","Component","InnerApp","className","src","logo","alt","React","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.acc11516.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { ClockSVGProps } from \".\";\n\nexport const ClockSVG: React.FC<ClockSVGProps> = (props: ClockSVGProps) => {\n  const little: number = ((props.hours * 30) + (props.minutes / 2)) || 0\n  const big: number = props.minutes * 6 || 0\n  const fast: number = props.seconds * 6 || 0\n\n  const rotatehand = (value: number) => {\n    return \"rotate(\" + value + \",80,80)\";\n  }\n\n  const colour = \"white\";\n  const handColour = \"Azure\";\n\n  return (\n    <svg viewBox=\"0 0 160 160\" width=\"160pt\" height=\"160pt\">\n      <defs>\n        <clipPath id=\"_clipPath_IAv25CjndUvOTDrZhLzZ3EkaVHrkuZNf\">\n          <rect width=\"160\" height=\"160\" />\n        </clipPath>\n        <radialGradient id=\"clockBase\" cx=\"50%\" cy=\"50%\" r=\"50%\" spreadMethod=\"pad\">\n          <stop offset=\"0%\" stopColor=\"black\" stopOpacity=\"1\" />\n          <stop offset=\"10%\" stopColor=\"MidnightBlue\" stopOpacity=\"1\" />\n          <stop offset=\"25%\" stopColor=\"Navy\" stopOpacity=\"1\" />\n          <stop offset=\"50%\" stopColor=\"MidnightBlue\" stopOpacity=\"1\" />\n          <stop offset=\"100%\" stopColor=\"black\" stopOpacity=\"1\" />\n        </radialGradient>\n        <symbol id=\"clockNum\" viewBox=\"0 0 434.869 434.87\" fill={colour}>\n          <path d=\"m212.44 401.5v28.53c0 6.448 10 6.448 10 0v-28.53c0-6.448-10-6.448-10 0z\" />\n          <path d=\"m121.93 374.6-15.109 24.47c-3.398 5.503 5.254 10.521 8.635 5.047l15.109-24.47c3.398-5.503-5.254-10.522-8.635-5.047z\" />\n          <path d=\"m55.506,304.669-24.75,14.748c-5.533,3.297-.506,11.944 5.047,8.635l24.75-14.748c5.532-3.297.506-11.945-5.047-8.635z\" />\n          <path d=\"m32.931 212.44h-28.095c-6.449 0-6.449 10 0 10h28.095c6.449 0 6.449-10 0-10z\" />\n          <path d=\"m60.913 120.77-25.11-13.952c-5.642-3.135-10.684 5.503-5.047 8.635l25.11 13.952c5.642 3.135 10.684-5.503 5.047-8.635z\" />\n          <path d=\"m129.125,54.968-13.671-24.211c-3.17-5.614-11.81-.576-8.635,5.047l13.671,24.211c3.17,5.614 11.809.576 8.635-5.047z\" />\n          <path d=\"m222.44 33v-28.163c0-6.449-10-6.449-10 0v28.163c0 6.449 10 6.449 10 0z\" />\n          <path d=\"m314.56 60.812 13.494-25.008c3.062-5.674-5.572-10.723-8.635-5.047l-13.494 25.008c-3.062 5.674 5.572 10.723 8.635 5.047z\" />\n          <path d=\"m379.36 130.2 24.75-14.749c5.532-3.297 0.507-11.944-5.047-8.635l-24.75 14.749c-5.532 3.297-0.506 11.944 5.047 8.635z\" />\n          <path d=\"m401.44 222.44h28.598c6.448 0 6.448-10 0-10h-28.598c-6.449 0-6.449 10 0 10z\" />\n          <path d=\"m374.68 314.12 24.39 13.93c5.608 3.203 10.645-5.438 5.047-8.635l-24.39-13.93c-5.609-3.203-10.645 5.438-5.047 8.635z\" />\n          <path d=\"m305.206,378.826 14.211,25.288c3.159,5.621 11.798.581 8.635-5.047l-14.211-25.288c-3.159-5.621-11.798-.581-8.635,5.047z\" />\n          <circle vector-effect=\"non-scaling-stroke\" cx=\"217\" cy=\"217\" r=\"10\" stroke-width=\"1\" />\n          <switch>\n            <text transform=\"translate(47.955 229.81)\">\n              <tspan x=\"0\" y=\"0\" font-family=\"'ComicSansMS-Bold'\" font-size=\"36\">9</tspan>\n            </text>\n          </switch>\n          <switch>\n            <text transform=\"translate(196.96 78.807)\">\n              <tspan x=\"0\" y=\"0\" font-family=\"'ComicSansMS-Bold'\" font-size=\"36\">12</tspan>\n            </text>\n          </switch>\n          <switch>\n            <text transform=\"translate(207.96 385.81)\">\n              <tspan x=\"0\" y=\"0\" font-family=\"'ComicSansMS-Bold'\" font-size=\"36\">6</tspan>\n            </text>\n          </switch>\n          <switch>\n            <text transform=\"translate(363.96 228.81)\">\n              <tspan x=\"0\" y=\"0\" font-family=\"'ComicSansMS-Bold'\" font-size=\"36\">3</tspan>\n            </text>\n          </switch>\n        </symbol>\n      </defs>\n      <g clip-path=\"url(#_clipPath_IAv25CjndUvOTDrZhLzZ3EkaVHrkuZNf)\" stroke-linejoin=\"miter\" stroke-linecap=\"square\" stroke-miterlimit=\"3\">\n        <circle vector-effect=\"non-scaling-stroke\" cx=\"80\" cy=\"80\" r=\"70\" fill=\"url(#clockBase)\" stroke=\"black\" stroke-width=\"15\" />\n        <svg viewBox=\"0 0 434.869 434.87\" x=\"10\" width=\"140\" >\n          <use href=\"#clockNum\" />\n        </svg>\n        <line x1=\"80\" y1=\"80\" x2=\"80\" y2=\"30\" transform={rotatehand(fast)} vector-effect=\"non-scaling-stroke\" stroke-width=\"1\" stroke={handColour} />\n        <line x1=\"80\" y1=\"80\" x2=\"80\" y2=\"30\" transform={rotatehand(big)} vector-effect=\"non-scaling-stroke\" stroke-width=\"2\" stroke={handColour} />\n        <line x1=\"80\" y1=\"80\" x2=\"80\" y2=\"50\" transform={rotatehand(little)} vector-effect=\"non-scaling-stroke\" stroke-width=\"2\" stroke={handColour} />\n      </g>\n    </svg>\n  )\n}","import React, { Component } from 'react'; // let's also import Component\nimport { ClockSVG } from './AnalogClock';\n\n// the clock's state has one field: The current time, based upon the\n// JavaScript class Date\nexport interface ClockState {\n  hours: number,\n  minutes: number,\n  seconds: number\n}\n\nexport interface ClockSVGProps {\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\n// Clock has no properties, but the current state is of type ClockState\n// The generic parameters in the Component typing allow to pass props\n// and state. Since we don't have props, we pass an empty object.\nexport class Clock extends Component<{}, ClockState> {\n  private timerId: number | null;\n\n  constructor(props: any) {\n    super(props);\n    const date = new Date();\n    const formatHours = (hours: number) => {\n      return (hours > 12) ? (hours - 12) : (hours ? hours : 12)\n    }\n\n    this.state = {\n      seconds: date.getSeconds(),\n      minutes: date.getMinutes(),\n      hours: formatHours(date.getHours())\n    }\n    this.timerId = null;\n  }\n\n  // The tick function sets the current state. TypeScript will let us know\n  // which ones we are allowed to set.\n  private clock_tick() {\n    this.setState(state => {\n      let { seconds, minutes, hours } = state;\n      seconds++; // Increment second\n      seconds = (seconds === 60) ? minutes++ && 0 : seconds;\n      minutes = (minutes === 60) ? hours++ && 0 : minutes;\n      hours = (hours === 13) ? 1 : hours;\n      return { seconds, minutes, hours };\n    })\n  }\n\n  // After the component did mount, we set the state each second.\n  componentDidMount() {\n    this.timerId = window.setInterval(() => this.clock_tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.timerId) {\n      window.clearInterval(this.timerId);\n    }\n  }\n\n  onClickButton1(event: any) {\n    console.log(\"Event\", event);\n  }\n\n  // render will know everything!\n  render() {\n    return (\n      <>\n        {/* <button onClick={this.onClickButton1}>\n          Clock\n        </button> */}\n        <ClockSVG seconds={this.state.seconds} minutes={this.state.minutes} hours={this.state.hours} />\n      </>\n    )\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { Clock } from './components/Clock';\n\nclass InnerApp extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <text>M A A R I</text>\n        </header>\n\n        <div className=\"App-main\">\n          <Clock />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default InnerApp;\n","import React from 'react';\nimport InnerApp from './InnerApp';\n\nconst App: React.FC = () => {\n  return (\n    <InnerApp/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}