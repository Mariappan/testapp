{"version":3,"sources":["components/Clock/AnalogClock1.tsx","components/Clock/AnalogClock2.tsx","components/Clock/AnalogClock3.tsx","components/Clock/Clock.tsx","InnerApp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ClockSVG","props","little","hours","minutes","big","fast","seconds","rotatehand","value","viewBox","width","height","id","clipPath","vectorEffect","cx","cy","r","fill","strokeWidth","stroke","strokeOpacity","strokeLinejoin","strokeLinecap","strokeMiterlimit","x1","y1","x2","y2","transform","spreadMethod","offset","stopColor","stopOpacity","d","x","y","fontFamily","fontSize","href","MinuteMaid","radius","angle","radian","thickness","Math","cos","sin","NumberText","text","oneMinuteRange","start","end","step","length","floor","abs","Array","from","index","rangeBetween","map","key","Clock","timerId","formatHours","date","Date","state","getSeconds","getMinutes","getHours","onClickAction","bind","this","setState","window","setInterval","clock_tick","clearInterval","event","onClick","defaultIndex","Component","InnerApp","className","React","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ead41f3d.chunk.js","sourcesContent":["import React from \"react\";\nimport { ClockSVGProps } from \".\";\n\nexport const ClockSVG: React.FC<ClockSVGProps> = (props: ClockSVGProps) => {\n  const little: number = ((props.hours * 30) + (props.minutes / 2)) || 0\n  const big: number = props.minutes * 6 || 0\n  const fast: number = props.seconds * 6 || 0\n\n  const rotatehand = (value: number) => {\n    return \"rotate(\" + value + \",80,80)\";\n  }\n  return (\n    <svg viewBox=\"0 0 160 160\" width=\"160pt\" height=\"160pt\">\n      <defs>\n        <clipPath id=\"_clipPath_IAv25CjndUvOTDrZhLzZ3EkaVHrkuZNf\">\n          <rect width=\"160\" height=\"160\" />\n        </clipPath>\n      </defs>\n      <g clipPath=\"url(#_clipPath_IAv25CjndUvOTDrZhLzZ3EkaVHrkuZNf)\">\n        <circle vectorEffect=\"non-scaling-stroke\" cx=\"79.99999999999999\" cy=\"79.99999999999999\" r=\"70\" fill=\"rgb(49,101,128)\" strokeWidth=\"1\" stroke=\"rgb(0,0,0)\" strokeOpacity=\"0.75\" strokeLinejoin=\"miter\" strokeLinecap=\"square\" strokeMiterlimit=\"3\" />\n        <circle vectorEffect=\"non-scaling-stroke\" cx=\"80\" cy=\"80\" r=\"1\" fill=\"none\" strokeWidth=\"1\" stroke=\"rgb(202,233,246)\" strokeLinejoin=\"miter\" strokeLinecap=\"butt\" strokeMiterlimit=\"3\" />\n        <line x1=\"80\" y1=\"80\" x2=\"80\" y2=\"20\" transform={rotatehand(fast)} vectorEffect=\"non-scaling-stroke\" strokeWidth=\"1\" stroke=\"rgb(218,240,253)\" strokeLinejoin=\"miter\" strokeLinecap=\"square\" strokeMiterlimit=\"3\" />\n        <line x1=\"80\" y1=\"80\" x2=\"80\" y2=\"20\" transform={rotatehand(big)} vectorEffect=\"non-scaling-stroke\" strokeWidth=\"2\" stroke=\"rgb(218,240,253)\" strokeLinejoin=\"miter\" strokeLinecap=\"square\" strokeMiterlimit=\"3\" />\n        <line x1=\"80\" y1=\"40\" x2=\"80\" y2=\"80\" transform={rotatehand(little)} vectorEffect=\"non-scaling-stroke\" strokeWidth=\"2\" stroke=\"rgb(202,233,246)\" strokeLinejoin=\"miter\" strokeLinecap=\"square\" strokeMiterlimit=\"3\" />\n      </g>\n    </svg>\n  )\n}","import React from \"react\";\nimport { ClockSVGProps } from \".\";\n\nexport const ClockSVG: React.FC<ClockSVGProps> = (props: ClockSVGProps) => {\n  const little: number = ((props.hours * 30) + (props.minutes / 2)) || 0\n  const big: number = props.minutes * 6 || 0\n  const fast: number = props.seconds * 6 || 0\n\n  const rotatehand = (value: number) => {\n    return \"rotate(\" + value + \",80,80)\";\n  }\n\n  const colour = \"white\";\n  const handColour = \"Azure\";\n\n  return (\n    <svg viewBox=\"0 0 160 160\" width=\"160pt\" height=\"160pt\">\n      <defs>\n        <clipPath id=\"_clipPath_IAv25CjndUvOTDrZhLzZ3EkaVHrkuZNf\">\n          <rect width=\"160\" height=\"160\" />\n        </clipPath>\n        <radialGradient id=\"clockBase\" cx=\"50%\" cy=\"50%\" r=\"50%\" spreadMethod=\"pad\">\n          <stop offset=\"0%\" stopColor=\"black\" stopOpacity=\"1\" />\n          <stop offset=\"10%\" stopColor=\"MidnightBlue\" stopOpacity=\"1\" />\n          <stop offset=\"25%\" stopColor=\"Navy\" stopOpacity=\"1\" />\n          <stop offset=\"50%\" stopColor=\"MidnightBlue\" stopOpacity=\"1\" />\n          <stop offset=\"100%\" stopColor=\"black\" stopOpacity=\"1\" />\n        </radialGradient>\n        <symbol id=\"clockNum\" viewBox=\"0 0 434.869 434.87\" fill={colour}>\n          <path d=\"m212.44 401.5v28.53c0 6.448 10 6.448 10 0v-28.53c0-6.448-10-6.448-10 0z\" />\n          <path d=\"m121.93 374.6-15.109 24.47c-3.398 5.503 5.254 10.521 8.635 5.047l15.109-24.47c3.398-5.503-5.254-10.522-8.635-5.047z\" />\n          <path d=\"m55.506,304.669-24.75,14.748c-5.533,3.297-.506,11.944 5.047,8.635l24.75-14.748c5.532-3.297.506-11.945-5.047-8.635z\" />\n          <path d=\"m32.931 212.44h-28.095c-6.449 0-6.449 10 0 10h28.095c6.449 0 6.449-10 0-10z\" />\n          <path d=\"m60.913 120.77-25.11-13.952c-5.642-3.135-10.684 5.503-5.047 8.635l25.11 13.952c5.642 3.135 10.684-5.503 5.047-8.635z\" />\n          <path d=\"m129.125,54.968-13.671-24.211c-3.17-5.614-11.81-.576-8.635,5.047l13.671,24.211c3.17,5.614 11.809.576 8.635-5.047z\" />\n          <path d=\"m222.44 33v-28.163c0-6.449-10-6.449-10 0v28.163c0 6.449 10 6.449 10 0z\" />\n          <path d=\"m314.56 60.812 13.494-25.008c3.062-5.674-5.572-10.723-8.635-5.047l-13.494 25.008c-3.062 5.674 5.572 10.723 8.635 5.047z\" />\n          <path d=\"m379.36 130.2 24.75-14.749c5.532-3.297 0.507-11.944-5.047-8.635l-24.75 14.749c-5.532 3.297-0.506 11.944 5.047 8.635z\" />\n          <path d=\"m401.44 222.44h28.598c6.448 0 6.448-10 0-10h-28.598c-6.449 0-6.449 10 0 10z\" />\n          <path d=\"m374.68 314.12 24.39 13.93c5.608 3.203 10.645-5.438 5.047-8.635l-24.39-13.93c-5.609-3.203-10.645 5.438-5.047 8.635z\" />\n          <path d=\"m305.206,378.826 14.211,25.288c3.159,5.621 11.798.581 8.635-5.047l-14.211-25.288c-3.159-5.621-11.798-.581-8.635,5.047z\" />\n          <circle vectorEffect=\"non-scaling-stroke\" cx=\"217\" cy=\"217\" r=\"10\" strokeWidth=\"1\" />\n          <switch>\n            <text transform=\"translate(47.955 229.81)\">\n              <tspan x=\"0\" y=\"0\" fontFamily=\"'ComicSansMS-Bold'\" fontSize=\"36\">9</tspan>\n            </text>\n          </switch>\n          <switch>\n            <text transform=\"translate(196.96 78.807)\">\n              <tspan x=\"0\" y=\"0\" fontFamily=\"'ComicSansMS-Bold'\" fontSize=\"36\">12</tspan>\n            </text>\n          </switch>\n          <switch>\n            <text transform=\"translate(207.96 385.81)\">\n              <tspan x=\"0\" y=\"0\" fontFamily=\"'ComicSansMS-Bold'\" fontSize=\"36\">6</tspan>\n            </text>\n          </switch>\n          <switch>\n            <text transform=\"translate(363.96 228.81)\">\n              <tspan x=\"0\" y=\"0\" fontFamily=\"'ComicSansMS-Bold'\" fontSize=\"36\">3</tspan>\n            </text>\n          </switch>\n        </symbol>\n      </defs>\n      <g clipPath=\"url(#_clipPath_IAv25CjndUvOTDrZhLzZ3EkaVHrkuZNf)\" strokeLinejoin=\"miter\" strokeLinecap=\"square\" strokeMiterlimit=\"3\">\n        <circle vectorEffect=\"non-scaling-stroke\" cx=\"80\" cy=\"80\" r=\"70\" fill=\"url(#clockBase)\" stroke=\"black\" strokeWidth=\"15\" />\n        <svg viewBox=\"0 0 434.869 434.87\" x=\"10\" width=\"140\" >\n          <use href=\"#clockNum\" />\n        </svg>\n        <line x1=\"80\" y1=\"80\" x2=\"80\" y2=\"30\" transform={rotatehand(fast)} vectorEffect=\"non-scaling-stroke\" strokeWidth=\"1\" stroke={handColour} />\n        <line x1=\"80\" y1=\"80\" x2=\"80\" y2=\"30\" transform={rotatehand(big)} vectorEffect=\"non-scaling-stroke\" strokeWidth=\"2\" stroke={handColour} />\n        <line x1=\"80\" y1=\"80\" x2=\"80\" y2=\"50\" transform={rotatehand(little)} vectorEffect=\"non-scaling-stroke\" strokeWidth=\"2\" stroke={handColour} />\n      </g>\n    </svg>\n  )\n}","import React from \"react\";\nimport { ClockSVGProps } from \".\";\n\nexport const ClockSVG: React.FC<ClockSVGProps> = (props: ClockSVGProps) => {\n    const little: number = ((props.hours * 30) + (props.minutes / 2)) || 0\n    const big: number = props.minutes * 6 || 0\n    const fast: number = props.seconds * 6 || 0\n\n    const rotatehand = (value: number) => {\n        return \"rotate(\" + value + \",50,50) \";\n    }\n\n    const rangeBetween = (start = 0, end: number, step = 1) => {\n        const length = Math.floor(Math.abs((end - start) / step)) + 1;\n        return Array.from(Array(length), (x, index) => start + index * step);\n    }\n    const MinuteMaid = (props: any) => {\n        const { radius, angle } = props;\n        const radian = angle * 0.0174532925;\n        const thickness = angle % 5 ? 0.75 : 2;\n        const x = (radius * Math.cos(radian)) + radius;\n        const y = (radius * Math.sin(radian)) + radius;\n        return <circle cx={x} cy={y} r={thickness} />\n    }\n    const NumberText = (props: any) => {\n        const translation = () => \"translate(\" + props.x + \" \" + props.y + \")\";\n        return (\n            <text transform={translation()}>\n                <tspan x=\"0\" y=\"0\" fontFamily=\"'ComicSansMS-Bold'\" fontSize=\"14\">{props.text}</tspan>\n            </text>\n        );\n    };\n    const oneMinute = 360 / 60;\n    var oneMinuteRange = rangeBetween(0, 360, oneMinute);\n    return (\n        <svg viewBox=\"0 0 240 240\" height=\"240px\">\n            <defs>\n                <radialGradient id=\"clockBase\" cx=\"50%\" cy=\"50%\" r=\"50%\" spreadMethod=\"pad\">\n                    <stop offset=\"0%\" stopColor=\"steelblue\" stopOpacity=\"1\" />\n                    <stop offset=\"30%\" stopColor=\"skyblue\" stopOpacity=\"1\" />\n                    <stop offset=\"45%\" stopColor=\"powderblue\" stopOpacity=\"1\" />\n                    <stop offset=\"60%\" stopColor=\"skyblue\" stopOpacity=\"1\" />\n                    <stop offset=\"100%\" stopColor=\"steelblue\" stopOpacity=\"1\" />\n                </radialGradient>\n                <radialGradient id=\"clockOuter\" cx=\"50%\" cy=\"50%\" r=\"50%\" spreadMethod=\"pad\">\n                    <stop offset=\"90%\" stopColor=\"steelblue\" stopOpacity=\"1\" />\n                    <stop offset=\"95%\" stopColor=\"steelblue\" stopOpacity=\"1\" />\n                    <stop offset=\"100%\" stopColor=\"Black\" stopOpacity=\"1\" />\n                </radialGradient>\n                <symbol id=\"clockDots\" viewBox=\"-10 -10 220 220\">\n                    {oneMinuteRange.map(value =>\n                        <MinuteMaid radius={100} angle={value} key={value}/>\n                    )}\n                </symbol>\n                <symbol id=\"clockNumbers\" >\n                    <NumberText x=\"195\" y=\"125\" text=\"3\" />\n                    <NumberText x=\"115\" y=\"203\" text=\"6\" />\n                    <NumberText x=\"36\" y=\"125\" text=\"9\" />\n                    <NumberText x=\"111\" y=\"47\" text=\"12\" />\n                    <text transform=\"translate(107, 85)\" stroke=\"darkslategray\" fill=\"darkslategray\">\n                        <tspan x=\"0\" y=\"0\" fontFamily=\"'Times'\" fontSize=\"8\" strokeWidth=\"0.4\">Ajanta</tspan>\n                    </text>\n                </symbol>\n                {/* Line Border rounded by strokeLinecap */}\n                <symbol id=\"clockHands\" viewBox=\"0 0 100 100\" strokeLinecap=\"round\">\n                    <line x1=\"50\" y1=\"50\" x2=\"50\" y2=\"30\" transform={rotatehand(little)} strokeWidth=\"2\" />\n                    <line x1=\"50\" y1=\"50\" x2=\"50\" y2=\"15\" transform={rotatehand(big)} strokeWidth=\"1.5\"/>\n                    <line x1=\"50\" y1=\"58\" x2=\"50\" y2=\"15\" transform={rotatehand(fast)} strokeWidth=\"0.75\" stroke=\"firebrick\" />\n                    <circle cx=\"50\" cy=\"50\" r=\"2\" strokeWidth=\"1\" fill=\"url(#clockBase)\" />\n                </symbol>\n            </defs>\n            <circle cx=\"120\" cy=\"120\" r=\"110\" stroke=\"url(#clockOuter)\" fill=\"url(#clockBase)\" strokeWidth=\"10\" />\n            <use href=\"#clockDots\" x=\"20\" y=\"20\" width=\"200px\" height=\"200px\" fill=\"darkslategray\" />\n            <use href=\"#clockNumbers\" stroke=\"darkslategray\" fill=\"darkslategray\" />\n            <use href=\"#clockHands\" stroke=\"darkslategray\" width=\"240\" height=\"240\" />\n        </svg>\n    )\n}\n","import React, { Component } from 'react'; // let's also import Component\n\nimport { ClockSVG as AnalogClock1 } from './AnalogClock1';\nimport { ClockSVG as AnalogClock2 } from './AnalogClock2';\nimport { ClockSVG as AnalogClock3 } from './AnalogClock3';\n\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport \"react-tabs/style/react-tabs.css\";\n\n// the clock's state has one field: The current time, based upon the\n// JavaScript class Date\nexport interface ClockState {\n  hours: number,\n  minutes: number,\n  seconds: number\n}\n\nexport interface ClockSVGProps {\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\n// Clock has no properties, but the current state is of type ClockState\n// The generic parameters in the Component typing allow to pass props\n// and state. Since we don't have props, we pass an empty object.\nexport class Clock extends Component<{}, ClockState> {\n  private timerId: number | null;\n  private formatHours = (hours: number) => {\n    return (hours > 12) ? (hours - 12) : (hours ? hours : 12)\n  }\n\n  constructor(props: any) {\n    super(props);\n    const date = new Date();\n    \n    this.state = {\n      seconds: date.getSeconds(),\n      minutes: date.getMinutes(),\n      hours: this.formatHours(date.getHours())\n    }\n    this.onClickAction = this.onClickAction.bind(this);\n    this.timerId = null;\n  }\n\n  // The tick function sets the current state. TypeScript will let us know\n  // which ones we are allowed to set.\n  private clock_tick() {\n    this.setState(state => {\n      let { seconds, minutes, hours } = state;\n      seconds++; // Increment second\n      seconds = (seconds === 60) ? minutes++ && 0 : seconds;\n      minutes = (minutes === 60) ? hours++ && 0 : minutes;\n      hours = (hours === 13) ? 1 : hours;\n      return { seconds, minutes, hours };\n    })\n  }\n\n  // After the component did mount, we set the state each second.\n  componentDidMount() {\n    this.timerId = window.setInterval(() => this.clock_tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.timerId) {\n      window.clearInterval(this.timerId);\n    }\n  }\n\n  onClickAction(event: any) {\n    const date = new Date();\n    \n    this.setState(state => {\n      return {\n        seconds: date.getSeconds(),\n        minutes: date.getMinutes(),\n        hours: this.formatHours(date.getHours())\n      }\n    })\n  }\n\n  // render will know everything!\n  render() {\n    return (\n      <div onClick={this.onClickAction}>\n        <Tabs defaultIndex={2}>\n          <TabList>\n            <Tab>0.1</Tab>\n            <Tab>0.2</Tab>\n            <Tab>1.0</Tab>\n          </TabList>\n\n          <TabPanel>\n            <AnalogClock1 seconds={this.state.seconds} minutes={this.state.minutes} hours={this.state.hours} />\n          </TabPanel>\n          <TabPanel>\n            <AnalogClock2 seconds={this.state.seconds} minutes={this.state.minutes} hours={this.state.hours} />\n          </TabPanel>\n          <TabPanel>\n            <AnalogClock3 seconds={this.state.seconds} minutes={this.state.minutes} hours={this.state.hours} />\n          </TabPanel>\n        </Tabs>\n      </div>\n    )\n  }\n}\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.scss';\nimport { Clock } from './components/Clock';\n\nclass InnerApp extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          <h1>C L O C K</h1>\n        </header>\n\n        <div className=\"App-main\">\n          <Clock />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default InnerApp;\n","import React from 'react';\nimport InnerApp from './InnerApp';\n\nconst App: React.FC = () => {\n  return (\n    <InnerApp/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}