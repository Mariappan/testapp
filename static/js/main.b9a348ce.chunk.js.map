{"version":3,"sources":["logo.svg","components/RoughText/RoughText.tsx","components/Clock/Clock.tsx","InnerApp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","RoughText","React","Component","Clock","props","interval","hours","date","Date","state","seconds","getSeconds","minutes","getMinutes","getHours","this","setState","sec","min","hr","dump","window","setInterval","tick","clearInterval","little","big","fast","rotatehand","value","viewBox","width","height","id","clip-path","vector-effect","cx","cy","r","fill","stroke-width","stroke","stroke-opacity","stroke-linejoin","stroke-linecap","stroke-miterlimit","x1","y1","x2","y2","transform","InnerApp","className","src","logo","alt","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,kC,8NCE9BC,G,MAAb,iLAEM,OACE,6BACA,mDAJR,GAA+BC,IAAMC,YCYxBC,G,MAAb,YAGE,WAAYC,GAAa,IAAD,uBACtB,4CAAMA,KAHAC,cAEgB,EAEtB,IACqBC,EADfC,EAAO,IAAIC,KAFK,OAOtB,EAAKC,MAAQ,CACXC,QAASH,EAAKI,aACdC,QAASL,EAAKM,aACdP,OAPmBA,EAOAC,EAAKO,WANjBR,EAAQ,GAAKA,EAAQ,GAAMA,GAAgB,KAQpD,EAAKD,SAAW,KAZM,EAH1B,oEAqBIU,KAAKC,SAAS,SAAAP,GACZ,IAAIQ,EAAcR,EAAMC,QACpBQ,EAAcT,EAAMG,QACpBO,EAAaV,EAAMH,MAavB,QAZAW,GACW,KACTA,EAAM,EACNC,KAEEA,GAAO,KACTA,EAAM,EACNC,KAEEA,GAAM,KACRA,EAAK,GAEA,CACLT,QAASO,EACTL,QAASM,EACTZ,MAAOa,IAERJ,KAAKK,QA1CZ,0EAkDuB,IAAD,OAClBL,KAAKV,SAAWgB,OAAOC,YAAY,kBAAM,EAAKC,QAAQ,OAnD1D,6CAuDQR,KAAKV,UACPgB,OAAOG,cAAcT,KAAKV,YAxDhC,+BAyFI,OAAO,kBA1BP,SAAmBD,GACjB,IAAMqB,EAAgC,GAAbrB,EAAMqB,OAAcrB,EAAMsB,IAAI,GAAO,EACxDA,EAA0B,EAAZtB,EAAMsB,KAAW,EAC/BC,EAA2B,EAAZvB,EAAMuB,MAAW,EAEhCC,EAAa,SAACC,GAClB,MAAO,UAAYA,EAAQ,WAG7B,OACE,yBAAKC,QAAQ,cAAcC,MAAM,QAAQC,OAAO,SAC9C,8BACE,8BAAUC,GAAG,8CACX,0BAAMF,MAAM,MAAMC,OAAO,UAG7B,uBAAGE,YAAU,oDACX,4BAAQC,gBAAc,qBAAqBC,GAAG,oBAAoBC,GAAG,oBAAoBC,EAAE,KAAKC,KAAK,kBAAkBC,eAAa,IAAIC,OAAO,aAAaC,iBAAe,OAAOC,kBAAgB,QAAQC,iBAAe,SAASC,oBAAkB,MACpP,4BAAQV,gBAAc,qBAAqBC,GAAG,KAAKC,GAAG,KAAKC,EAAE,IAAIC,KAAK,OAAOC,eAAa,IAAIC,OAAO,mBAAmBE,kBAAgB,QAAQC,iBAAe,OAAOC,oBAAkB,MACxL,0BAAMC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,UAAatB,EAAWD,GAAOQ,gBAAc,qBAAqBK,eAAa,IAAIC,OAAO,mBAAmBE,kBAAgB,QAAQC,iBAAe,SAASC,oBAAkB,MACrN,0BAAMC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,UAAatB,EAAWF,GAAMS,gBAAc,qBAAqBK,eAAa,IAAIC,OAAO,mBAAmBE,kBAAgB,QAAQC,iBAAe,SAASC,oBAAkB,MACpN,0BAAMC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,UAAatB,EAAWH,GAASU,gBAAc,qBAAqBK,eAAa,IAAIC,OAAO,mBAAmBE,kBAAgB,QAAQC,iBAAe,SAASC,oBAAkB,SAKxN,CAAWlB,KAAMZ,KAAKN,MAAMC,QAASgB,IAAKX,KAAKN,MAAMG,QAASa,OAAQV,KAAKN,MAAMH,YAzF5F,GAA2BJ,cCQZiD,E,iLAdX,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAE3C,yBAAKH,UAAU,YACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GATanD,IAAMC,WCGdsD,EANO,WACpB,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BpC,OAAOqC,SAASC,UAEe,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b9a348ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nexport class RoughText extends React.Component {\n    render() {\n      return (\n        <div>\n        <p>This is awesome</p>\n        </div>\n      );\n    }\n  }\n","import React, { Component } from 'react'; // let's also import Component\nimport './assets/clock.scss';\n\n// the clock's state has one field: The current time, based upon the\n// JavaScript class Date\nexport interface ClockState {\n  hours: number,\n  minutes: number,\n  seconds: number\n}\n\n// Clock has no properties, but the current state is of type ClockState\n// The generic parameters in the Component typing allow to pass props\n// and state. Since we don't have props, we pass an empty object.\nexport class Clock extends Component<{}, ClockState> {\n  private interval: number | null;\n\n  constructor(props: any) {\n    super(props);\n    const date = new Date();\n    const formatHours = (hours: number) => {\n      return hours > 12 ? hours - 12 : (hours ? hours : 12)\n    }\n\n    this.state = {\n      seconds: date.getSeconds(),\n      minutes: date.getMinutes(),\n      hours: formatHours(date.getHours())\n    }\n    this.interval = null;\n  }\n\n  // The tick function sets the current state. TypeScript will let us know\n  // which ones we are allowed to set.\n  tick() {\n    this.setState(state => {\n      let sec: number = state.seconds;\n      let min: number = state.minutes;\n      let hr: number = state.hours;\n      sec++;\n      if (sec >= 60) {\n        sec = 0;\n        min++;\n      }\n      if (min >= 60) {\n        min = 0;\n        hr++;\n      }\n      if (hr >= 13) {\n        hr = 1;\n      }\n      return {\n        seconds: sec,\n        minutes: min,\n        hours: hr\n      }\n    }, this.dump)\n  }\n\n  dump() {\n    // console.log(`== MAARI == Time is`, this.state.hours, \":\", this.state.minutes, \":\", this.state.seconds);\n  }\n\n  // After the component did mount, we set the state each second.\n  componentDidMount() {\n    this.interval = window.setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      window.clearInterval(this.interval);\n    }\n  }\n\n  // render will know everything!\n  render() {\n    // Icon\n    function IconClock(props: any) {\n      const little: number = ((props.little*30) + (props.big/2)) || 0\n      const big: number = props.big * 6 || 0\n      const fast: number = props.fast *6 || 0\n\n      const rotatehand = (value: number) => {\n        return \"rotate(\" + value + \",80,80)\";\n      }\n\n      return (\n        <svg viewBox=\"0 0 160 160\" width=\"160pt\" height=\"160pt\">\n          <defs>\n            <clipPath id=\"_clipPath_IAv25CjndUvOTDrZhLzZ3EkaVHrkuZNf\">\n              <rect width=\"160\" height=\"160\" />\n            </clipPath>\n          </defs>\n          <g clip-path=\"url(#_clipPath_IAv25CjndUvOTDrZhLzZ3EkaVHrkuZNf)\">\n            <circle vector-effect=\"non-scaling-stroke\" cx=\"79.99999999999999\" cy=\"79.99999999999999\" r=\"70\" fill=\"rgb(49,101,128)\" stroke-width=\"1\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"0.75\" stroke-linejoin=\"miter\" stroke-linecap=\"square\" stroke-miterlimit=\"3\" />\n            <circle vector-effect=\"non-scaling-stroke\" cx=\"80\" cy=\"80\" r=\"1\" fill=\"none\" stroke-width=\"1\" stroke=\"rgb(202,233,246)\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\" stroke-miterlimit=\"3\" />\n            <line x1=\"80\" y1=\"80\" x2=\"80\" y2=\"20\" transform = {rotatehand(fast)} vector-effect=\"non-scaling-stroke\" stroke-width=\"1\" stroke=\"rgb(218,240,253)\" stroke-linejoin=\"miter\" stroke-linecap=\"square\" stroke-miterlimit=\"3\" />\n            <line x1=\"80\" y1=\"80\" x2=\"80\" y2=\"20\" transform = {rotatehand(big)} vector-effect=\"non-scaling-stroke\" stroke-width=\"2\" stroke=\"rgb(218,240,253)\" stroke-linejoin=\"miter\" stroke-linecap=\"square\" stroke-miterlimit=\"3\" />\n            <line x1=\"80\" y1=\"40\" x2=\"80\" y2=\"80\" transform = {rotatehand(little)} vector-effect=\"non-scaling-stroke\" stroke-width=\"2\" stroke=\"rgb(202,233,246)\" stroke-linejoin=\"miter\" stroke-linecap=\"square\" stroke-miterlimit=\"3\" />\n          </g>\n        </svg>\n      )\n    }\n    return <IconClock fast={this.state.seconds} big={this.state.minutes} little={this.state.hours}/>\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { RoughText } from './components/RoughText/RoughText';\nimport { Clock } from './components/Clock';\n\nclass InnerApp extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <div className=\"App-main\">\n          <Clock />\n          <RoughText />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default InnerApp;\n","import React from 'react';\nimport InnerApp from './InnerApp';\n\nconst App: React.FC = () => {\n  return (\n    <InnerApp/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}